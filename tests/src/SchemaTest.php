<?php

namespace Queryjson\test;

require __DIR__ . '/../../vendor/autoload.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-04-22 at 14:11:43.
 */
class SchemaTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Queryjson\Schema
     */
    protected $bdd;

    /**
     *
     * @var Queryjson\Request 
     */
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->bdd = new \Queryjson\Schema();
        $this->bdd->setConfig( 'tests/data', 'schema', 'json' );

        $this->request = new \Queryjson\Request();
        $this->request->setSchema( $this->bdd );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testCreateTable()
    {
        $this->bdd->createTable( 'user', function($table)
        {
            return $table->increments( 'id' )
                    ->string( 'name' )
                    ->string( 'firstname' );
        } );
        $this->bdd->createTable( 'user_role', function($table)
        {
            return $table->integer( 'id_user' )
                    ->integer( 'id_role' );
        } );
        $this->bdd->createTable( 'role', function($table)
        {
            return $table->increments( 'id' )
                    ->string( 'labelle' );
        } );

        $this->assertFileExists( 'tests/data/user.json' );
        $this->assertFileExists( 'tests/data/user_role.json' );
        $this->assertFileExists( 'tests/data/role.json' );
    }

    public function testInsertInto()
    {
        $this->request->insertInto( 'user', [ 'id', 'name', 'firstname'] )
            ->values( [ 0, 'NOEL', 'Mathieu'] )
            ->values( [ 1, 'DUPOND', 'Jean'] )
            ->values( [ 2, 'MARTIN', 'Manon'] )
            ->values( [ 3, 'PETIT', 'Marie'] )
            ->values( [ 4, 'DUPOND', 'Pierre'] )
            ->values( [ 5, 'MEYER', 'Eva'] )
            ->values( [ 6, 'ROBERT', ''] )
            ->execute();

        $this->request->insertInto( 'role', [ 'id', 'labelle'] )
            ->values( [ 0, 'Admin'] )
            ->values( [ 1, 'Author'] )
            ->values( [ 2, 'User'] )
            ->execute();

        $this->request->insertInto( 'user_role', [ 'id_user', 'id_role'] )
            ->values( [ 0, 0] )
            ->values( [ 1, 0] )
            ->values( [ 2, 1] )
            ->values( [ 3, 1] )
            ->values( [ 4, 2] )
            ->values( [ 5, 2] )
            ->values( [ 6, 2] )
            ->execute();

        $this->assertJsonFileEqualsJsonFile( 'tests/data/user.json', 'tests/dataTest/user_test.json' );
        $this->assertJsonFileEqualsJsonFile( 'tests/data/user_role.json', 'tests/dataTest/user_role_test.json' );
        $this->assertJsonFileEqualsJsonFile( 'tests/data/role.json', 'tests/dataTest/role_test.json' );
    }

    /**
     * @expectedException Exception
     */
    public function testInsertIntoErrorTable()
    {
        $this->request->insertInto( 'foo', [ 'id', 'name', 'firstname'] )
            ->values( [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'] )
            ->execute();
    }

    /**
     * @expectedException Exception
     */
    public function testInsertIntoErrorColumn()
    {
        $this->request->insertInto( 'user', [] )
            ->values( [ 0, 'NOEL'] )
            ->execute();
    }

    /**
     * @expectedException Exception
     */
    public function testInsertIntoErrorValue()
    {
        $this->request->insertInto( 'user', [ 'id', 'name', 'firstname'] )
            ->values( [ 0, 'NOEL'] )
            ->execute();
    }

    public function testSelect()
    {
        $data = $this->request->select( [ 'firstname'] )->from( 'user' )->fetch();

        $this->assertArraySubset( $data, [ 'firstname' => 'Mathieu'] );
    }

    /**
     * @expectedException Exception
     */
    public function testSelectErrorValue()
    {
        $this->request->select( [ 'foo'] )->from( 'user' )->fetch();
    }

    /**
     * @expectedException Exception
     */
    public function testSelectErrorFrom()
    {
        $this->request->select( [ 'firstname'] )->from( 'foo' )->fetch();
    }

    public function testSelectAlternative()
    {
        $data1 = $this->request->select( [] )->from( 'user' )->fetch();
        $data2 = $this->request->from( 'user' )->fetch();

        $this->assertArraySubset( $data1, [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'] );
        $this->assertArraySubset( $data2, [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'] );
    }

    /**
     * @expectedException Exception
     */
    public function testSelectAlternativeErrorFrom()
    {
        $this->request->select( [] )->from( 'foo' )->fetch();
    }

    public function testWhereEquals()
    {
        $data = $this->request->select( [ 'name'] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'firstname', '==', 'Jean' ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'name' => 'DUPOND'] );
    }

    public function testWhereEqualsAlternative()
    {
        $data = $this->request->select( [ 'name'] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'firstname', 'Jean' ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'name' => 'DUPOND'] );
    }

    public function testWhereNotEquals()
    {
        $data = $this->request->select( [ 'firstname'] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'firstname', '!=', 'Jean' ) )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'firstname' => 'Mathieu'],
            [ 'firstname' => 'Manon'],
            [ 'firstname' => 'Marie'],
            [ 'firstname' => 'Pierre'],
            [ 'firstname' => 'Eva'],
            [ 'firstname' => '']
        ] );
    }

    public function testWhereLess()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'id', '<', 1 ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'] );
    }

    public function testWhereLessOrEquals()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'id', '<=', 1 ) )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'],
            [ 'id' => 1, 'name' => 'DUPOND', 'firstname' => 'Jean']
        ] );
    }

    public function testWhereGreater()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'id', '>', 5 ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'id' => 6, 'name' => 'ROBERT', 'firstname' => ''] );
    }

    public function testWhereGreaterOrEquals()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'id', '>=', 5 ) )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'id' => 5, 'name' => 'MEYER', 'firstname' => 'Eva'],
            [ 'id' => 6, 'name' => 'ROBERT', 'firstname' => '']
        ] );
    }

    /**
     * @expectedException Exception
     */
    public function testWhereEqualsErrorColumn()
    {
        $this->request->select( [ 'name'] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'foo', '==', 'Jean' ) )
            ->fetch();
    }

    public function testWhereBwetween()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->bwetween( 'id', 0, 2 ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'id' => 1, 'name' => 'DUPOND', 'firstname' => 'Jean'] );
    }

    /**
     * @expectedException Exception
     */
    public function testWhereBwetweenErrorColumn()
    {
        $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->bwetween( 'foo', 0, 2 ) )
            ->fetch();
    }

    public function testWhereIn()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->in( 'id', [ 0, 1] ) )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'],
            [ 'id' => 1, 'name' => 'DUPOND', 'firstname' => 'Jean']
        ] );
    }

    /**
     * @expectedException Exception
     */
    public function testWhereInErrorColumn()
    {
        $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->in( 'foo', [ 0, 1] ) )
            ->fetchAll();
    }

    public function testWhereEmpty()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->isEmpty( 'firstname' ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'id' => 6, 'name' => 'ROBERT', 'firstname' => ''] );
    }

    /**
     * @expectedException Exception
     */
    public function testWhereEmptyErrorColumn()
    {
        $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->isEmpty( 'foo' ) )
            ->fetch();
    }

    public function testWhereRegex()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->regex( 'name', '/^D/' ) )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'id' => 1, 'name' => 'DUPOND', 'firstname' => 'Jean'],
            [ 'id' => 4, 'name' => 'DUPOND', 'firstname' => 'Pierre']] );
    }

    /**
     * @expectedException Exception
     */
    public function testWhereRegexErrorColumns()
    {
        $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->regex( 'foo', '/^D/' ) )
            ->fetch();
    }

    public function testAndWhere()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()
                ->where( 'name', 'DUPOND' )
                ->wAND()
                ->where( 'firstname', 'Pierre' ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'id' => 4, 'name' => 'DUPOND', 'firstname' => 'Pierre'] );
    }

    public function testOrWhere()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()
                ->where( 'name', 'DUPOND' )
                ->wOR()
                ->where( 'firstname', 'Mathieu' ) )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'],
            [ 'id' => 1, 'name' => 'DUPOND', 'firstname' => 'Jean'],
            [ 'id' => 4, 'name' => 'DUPOND', 'firstname' => 'Pierre']
        ] );
    }

    public function testLimit()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->limit( 1 )
            ->fetchAll();

        $this->assertArraySubset( $data, [ [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu']] );
    }

    public function testLimitOffset()
    {
        $data = $this->request->select( [] )
            ->from( 'user' )
            ->limit( 1, 1 )
            ->fetchAll();

        $this->assertArraySubset( $data, [ [ 'id' => 1, 'name' => 'DUPOND', 'firstname' => 'Jean']] );
    }

    public function testOrderByAsc()
    {
        $data = $this->request->select( [ 'firstname'] )
            ->from( 'user' )
            ->orderBy( 'firstname' )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'firstname' => ''],
            [ 'firstname' => 'Eva'],
            [ 'firstname' => 'Jean'],
            [ 'firstname' => 'Manon'],
            [ 'firstname' => 'Marie'],
            [ 'firstname' => 'Mathieu'],
            [ 'firstname' => 'Pierre']
        ] );
    }

    public function testOrderByDesc()
    {
        $data = $this->request->select( [ 'firstname'] )
            ->from( 'user' )
            ->orderBy( 'firstname', 'desc' )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'firstname' => 'Pierre'],
            [ 'firstname' => 'Mathieu'],
            [ 'firstname' => 'Marie'],
            [ 'firstname' => 'Manon'],
            [ 'firstname' => 'Jean'],
            [ 'firstname' => 'Eva'],
            [ 'firstname' => '']
        ] );
    }

    public function testOrderByMultipleAsc()
    {
        $data = $this->request->select( [ 'name', 'firstname'] )
            ->from( 'user' )
            ->orderBy( 'name', 'desc' )
            ->orderBy( 'firstname' )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'name' => 'ROBERT', 'firstname' => ''],
            [ 'name' => 'PETIT', 'firstname' => 'Marie'],
            [ 'name' => 'NOEL', 'firstname' => 'Mathieu'],
            [ 'name' => 'MEYER', 'firstname' => 'Eva'],
            [ 'name' => 'MARTIN', 'firstname' => 'Manon'],
            [ 'name' => 'DUPOND', 'firstname' => 'Jean',],
            [ 'name' => 'DUPOND', 'firstname' => 'Pierre'],
        ] );
    }

    public function testOrderByMultipleDesc()
    {
        $data = $this->request->select( [ 'name', 'firstname'] )
            ->from( 'user' )
            ->orderBy( 'name', 'desc' )
            ->orderBy( 'firstname', 'desc' )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'name' => 'ROBERT', 'firstname' => ''],
            [ 'name' => 'PETIT', 'firstname' => 'Marie'],
            [ 'name' => 'NOEL', 'firstname' => 'Mathieu'],
            [ 'name' => 'MEYER', 'firstname' => 'Eva'],
            [ 'name' => 'MARTIN', 'firstname' => 'Manon'],
            [ 'name' => 'DUPOND', 'firstname' => 'Pierre'],
            [ 'name' => 'DUPOND', 'firstname' => 'Jean',],
        ] );
    }

    public function testLeftJoin()
    {
        $data = $this->request->select( [ 'id', 'name', 'firstname'] )
            ->from( 'user' )
            ->leftJoin( 'user_role', $this->request->expr()->where( 'id', '==', 'user_role.id_user' ) )
            ->leftJoin( 'role', $this->request->expr()->where( 'id_role', '==', 'role.id' ) )
            ->where( $this->request->expr()->where( 'labelle', 'Admin' ) )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'id' => 0, 'name' => 'NOEL', 'firstname' => 'Mathieu'],
            [ 'id' => 1, 'name' => 'DUPOND', 'firstname' => 'Jean'],
        ] );
    }

    /**
     * @expectedException Exception
     */
    public function testLeftJoinErrorColumn()
    {
        $this->request->select( [ 'id', 'name', 'firstname'] )
            ->from( 'user' )
            ->leftJoin( 'user_role', $this->request->expr()->where( 'foo', '==', 'user_role.id_user' ) )
            ->leftJoin( 'role', $this->request->expr()->where( 'id_role', '==', 'role.id' ) )
            ->where( $this->request->expr()->where( 'labelle', 'Admin' ) )
            ->fetch();
    }

    public function testUpdateData()
    {
        $this->request->update( 'user', [ 'name' => 'PETIT'] )
            ->where( $this->request->expr()->where( 'id', '==', 0 ) )
            ->execute();

        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'id', '==', 0 ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'id' => 0, 'name' => 'PETIT', 'firstname' => 'Mathieu'] );
    }

    public function testUpdateDataFull()
    {
        $this->request->update( 'user', [ 'name' => 'PETIT'] )->execute();

        $data = $this->request->select( [] )
            ->from( 'user' )
            ->where( $this->request->expr()->where( 'id', '==', 0 ) )
            ->fetch();

        $this->assertArraySubset( $data, [ 'id' => 0, 'name' => 'PETIT', 'firstname' => 'Mathieu'] );
    }

    public function testDeleteData()
    {
        $this->request->from( 'user' )
            ->delete()
            ->where( $this->request->expr()->bwetween( 'id', 0, 5 ) )
            ->execute();

        $data = $this->request->select( [] )
            ->from( 'user' )
            ->fetchAll();

        $this->assertArraySubset( $data, [
            [ 'id' => 0, 'name' => 'PETIT', 'firstname' => 'Mathieu'],
            [ 'id' => 5, 'name' => 'PETIT', 'firstname' => 'Eva'],
            [ 'id' => 6, 'name' => 'PETIT', 'firstname' => '']
        ] );
    }

    public function testDropTable()
    {
        $this->bdd->dropTable( 'user' );
        $this->bdd->dropTable( 'user_role' );
        $this->bdd->dropTable( 'role' );

        $this->assertFileNotExists( 'test/data/user.json' );
        $this->assertFileNotExists( 'test/data/user_role.json' );
        $this->assertFileNotExists( 'test/data/role.json' );
    }

    public function testDropSchema()
    {
        $this->bdd->dropSchema();
        $this->assertFileNotExists( 'test/data/schema.json' );
    }

}
